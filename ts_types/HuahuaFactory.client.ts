/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Coin, QueryMsg, Addr, ConfigResponse, Config, PaginatedTokensResponse, Token, TokenInfoResponse } from "./HuahuaFactory.types";
export interface HuahuaFactoryReadOnlyInterface {
  contractAddress: string;
  tokenInfo: ({
    subdenom
  }: {
    subdenom: string;
  }) => Promise<TokenInfoResponse>;
  getTokensWithPagination: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<PaginatedTokensResponse>;
  config: () => Promise<ConfigResponse>;
}
export class HuahuaFactoryQueryClient implements HuahuaFactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.tokenInfo = this.tokenInfo.bind(this);
    this.getTokensWithPagination = this.getTokensWithPagination.bind(this);
    this.config = this.config.bind(this);
  }
  tokenInfo = async ({
    subdenom
  }: {
    subdenom: string;
  }): Promise<TokenInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token_info: {
        subdenom
      }
    });
  };
  getTokensWithPagination = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<PaginatedTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_tokens_with_pagination: {
        limit,
        start_after: startAfter
      }
    });
  };
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface HuahuaFactoryInterface extends HuahuaFactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createToken: ({
    description,
    logo,
    name,
    subdenom,
    url
  }: {
    description: string;
    logo: string;
    name: string;
    subdenom: string;
    url: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  completeBondingCurve: ({
    subdenom
  }: {
    subdenom: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  createPool: ({
    coins
  }: {
    coins: Coin[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class HuahuaFactoryClient extends HuahuaFactoryQueryClient implements HuahuaFactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createToken = this.createToken.bind(this);
    this.completeBondingCurve = this.completeBondingCurve.bind(this);
    this.createPool = this.createPool.bind(this);
  }
  createToken = async ({
    description,
    logo,
    name,
    subdenom,
    url
  }: {
    description: string;
    logo: string;
    name: string;
    subdenom: string;
    url: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_token: {
        description,
        logo,
        name,
        subdenom,
        url
      }
    }, fee_, memo_, funds_);
  };
  completeBondingCurve = async ({
    subdenom
  }: {
    subdenom: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      complete_bonding_curve: {
        subdenom
      }
    }, fee_, memo_, funds_);
  };
  createPool = async ({
    coins
  }: {
    coins: Coin[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_pool: {
        coins
      }
    }, fee_, memo_, funds_);
  };
}