/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Addr, ConfigResponse, Config, PaginatedTokensResponse, Token, TokenInfoResponse } from "./HuahuaFactory.types";
export interface HuahuaFactoryMsg {
  contractAddress: string;
  sender: string;
  createToken: ({
    description,
    name,
    subdenom,
    url
  }: {
    description: string;
    name: string;
    subdenom: string;
    url: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  completeBondingCurve: ({
    subdenom
  }: {
    subdenom: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class HuahuaFactoryMsgComposer implements HuahuaFactoryMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createToken = this.createToken.bind(this);
    this.completeBondingCurve = this.completeBondingCurve.bind(this);
  }
  createToken = ({
    description,
    name,
    subdenom,
    url
  }: {
    description: string;
    name: string;
    subdenom: string;
    url: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_token: {
            description,
            name,
            subdenom,
            url
          }
        })),
        funds: funds_
      })
    };
  };
  completeBondingCurve = ({
    subdenom
  }: {
    subdenom: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          complete_bonding_curve: {
            subdenom
          }
        })),
        funds: funds_
      })
    };
  };
}